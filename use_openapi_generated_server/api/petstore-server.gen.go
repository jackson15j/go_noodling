// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "go_noodling/use_openapi_generated_server/api/models"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
