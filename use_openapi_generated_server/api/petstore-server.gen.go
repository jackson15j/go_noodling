// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "go_noodling/use_openapi_generated_server/api/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
