// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "go_noodling/use_openapi_generated_server/api/models"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
