// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "go_noodling/use_openapi_generated_server/api/models"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW8byRH9K4VOjpOhIi9y4ClaywsQyNpKlOSy9qHYXSTL6I9RdzVlQeB/D6pn+GVx",
	"ZSwSBAb2IpHD7q5Xr15Vv3k2NoUhRYpSzPzZFLuhgO3ju5xT1g9DTgNlYWqPbXKk/1cpBxQzNxzlzbXp",
	"jDwNNH6lNWWz60ygUnDdVk8/Fskc12a360ymh8qZnJn/Mp55XP/pcFhafiYretZ7erwjeQknYrgUoDOC",
	"628HbrvHtZeCThHR+w8rM//l2fwx08rMzR9mR9ZmE2WzCeGu+xoiu6/5+ssPF/j6Chq7C5A+7XQZx1Ua",
	"SxEFbYNIAdmbucGBhTD8tTziek2552S6iSNzPz6Dm7sF/JMwmM7UrJs2IsN8NjvZs+uMo2IzD8Ipmrm5",
	"gYJh8NQ2ywYFaqECCANJkZQJsABGoC/jMkngKKRYJKMQrAilZirAEWRD8GGgqCe96a+gDGR5xRZbqM54",
	"thQLHYtrbga0G4Lr/uoMcpnPZo+Pjz22n/uU17Npb5n9bfH23fv7d3+67q/6jQTfFEE5lA+re8pbtnQp",
	"71lbMtPisPhTzu6mNE1ntpTLSMqf+6v+Sk9OA0Uc2MzNm/aoMwPKphV/pgTph/WopXNa/0FScyyA3jcm",
	"YZVTaAyVpyIURqr1ey2UYaMkW0ulgKSP8T0GKOTApug4UJQagIr08DOSpYgFhMKQMhRcswgXKDgwxQ4i",
	"WcibFG0tUCicLGABDCQ93FAkjIAC64xbdghY15U6QAuMtnpuW3t4WzMuWWqG5DiBT5lCBylHzAS0JgHy",
	"NKGLZDuwNZdagB14slJLD7eVCwQGqXng0sFQ/ZYjZo1FOWnSHQhHy65GgS1mrgU+1yKph0WEDVrYKAgs",
	"hWDwKITg2EoNSsdibDHNBR0PXCzHNWAUzeaYu+d19XjIfNhgJsm4J1HXQ0ieijABh4GyY2Xq37zFMCaE",
	"nh8qBnCMykzGAg+a25Y8C8QUQVKWlJUSXlF0h+g93GWkQlEUJkUORwA1R4Rt8lUGFNhSpIgKeCRX/wSs",
	"Wc9YxOPJK8oT6yu07LmcBWkR9E93rK+Fkhx60sK6Tnm0lFE0Mf3fw30tA0XHyrJHFY9LPuVOFVjIiqq5",
	"Zdmkoll3sKUN2+oRdNBlVwN4XlJOPfyc8pKBKpeQ3GkZ9OcmbI+WI2P/MX6M9+RaJWqBFan4fFqm3DZQ",
	"OiomV8k19KC9EbAdOJHPxXdA9axbxpKDr6pDVWcPdxss5P3YGAPlaXujuZWXBFZYLS/rSDju4+i60/1b",
	"8lPpeEs5Y3ceWvsE2HWHRoy83PTwL4GBvKcoVB4qwZBKJe2kfRP1oFTgvgu06fZc7k/ap9WY7BqQgyxi",
	"jRYkcxHNBbYsSD38VIslIGnTwFU+dIFOimLJU+YGZ9TvfkNQtVRs4rE1FIwQcK0pk5+q1cPf67g1JK91",
	"G6tHddTOEUp3GD6A1WqTjCsneY5pT+KYhsyhG1UsWmDg2B2hTI0bufAecFEMlqU6VqilIFTZ62wq5Bjp",
	"jLQWr4e708I05iaMQybhGk4m1yia2p3oW0dv/1GvOHUH7bpbODM3P3F0er+0ayMrAZRLsxvnl4XgWuc+",
	"rNgLZVg+GbUCZm4eKuWn4z2v60w3WblmQIRCuWySxgeYMz7p9yJP7dpTs9KczDmCgF846BivYUkZ0goy",
	"leqlwcrtLvsVTJ4Dyxmob/rH3Sc1RGXQ0dLQX19d7V0PxdGYDYOfjMPsc1GIz5fSfs21jZbtKyJ2L/zP",
	"QAJ7MKM7WmH18pvwvAZjNNsXAtdIXwYdrTqDD2uGVC64ibeZUJori/SofmJvt5p10Wt2hKdL1LF5nx7J",
	"vdDjjVM5mtGOUpEfk3v6nyW6d8kvM70jURmhc/rvANuc2mLJlXb/pSy+qYbvvPq7bjSVs2d2u1EEnoRe",
	"ymF8rnIoHNeemiKWqLMyjbpY3EKpivqCCm7b7lEIr46lxa0OgmGs3oRlGgLqgo8zgN2LWv7aQLj8gvRy",
	"IPzwMmsFMqJw30Gjvu76R1d/KMmhUIvbDnh19P0uUYGYBDa4peMbQFswtApdvFF+fFq431S9FYnd/N+K",
	"9ztrW71eKW/3ZTh/j92/RvcnL6Pba33h/08AAAD//8nyWGeiEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
