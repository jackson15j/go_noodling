// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "go_noodling/use_openapi_generated_server/api/models"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
