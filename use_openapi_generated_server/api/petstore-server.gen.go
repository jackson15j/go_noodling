// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "go_noodling/use_openapi_generated_server/api/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id string) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WkfWFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
